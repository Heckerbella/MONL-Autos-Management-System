// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @relation(fields: [roleID], references: [id])
  roleID    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id             Int          @id @default(autoincrement())
  firstName      String
  lastName       String
  otherName      String?
  email          String       @unique
  phone          String
  billingAddress String
  companyContact String?
  companyName    String?
  vehicles       Vehicle[]
  customerType   CustomerType @relation(fields: [customerTypeID], references: [id])
  customerTypeID Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  jobs           Job[]
  invoices       Invoice[]
  estimates      Estimate[]
}

model CustomerType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  customers Customer[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Vehicle {
  id            Int         @id @default(autoincrement())
  owner         Customer    @relation(fields: [ownerID], references: [id])
  ownerID       Int
  modelNo       String
  modelName     String
  engineNo      String      @unique
  chasisNo      String      @unique
  licensePlate  String      @unique
  mileage       Int
  vehicleType   VehicleType @relation(fields: [vehicleTypeID], references: [id])
  vehicleTypeID Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  jobs          Job[]
}

model VehicleType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  vehicles  Vehicle[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model JobType {
  id        Int      @id @default(autoincrement())
  name      String
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobMaterial {
  id          Int      @id @default(autoincrement())
  productName String
  productCost String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id           Int       @id @default(autoincrement())
  customer     Customer  @relation(fields: [customerID], references: [id])
  customerID   Int
  vehicle      Vehicle   @relation(fields: [vehicleID], references: [id])
  vehicleID    Int
  jobType      JobType   @relation(fields: [jobTypeID], references: [id])
  jobTypeID    Int
  deliveryDate DateTime?
  invoice      Invoice?
  estimate     Estimate?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Invoice {
  id          Int       @id @default(autoincrement())
  dueDate     DateTime?
  description String?
  invoiceNo   Int       @default(autoincrement())
  customer    Customer  @relation(fields: [customerID], references: [id])
  customerID  Int
  job         Job       @relation(fields: [jobID], references: [id])
  jobID       Int       @unique
  amount      Decimal   @default(0) @db.Decimal(10, 2)
  paid        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Estimate {
  id          Int      @id @default(autoincrement())
  estimateNo  Int      @default(autoincrement())
  description String?
  customer    Customer @relation(fields: [customerID], references: [id])
  customerID  Int
  job         Job      @relation(fields: [jobID], references: [id])
  jobID       Int      @unique
  amount      Decimal  @default(0) @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
